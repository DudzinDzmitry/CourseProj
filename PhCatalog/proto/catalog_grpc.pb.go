// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: catalog.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PharmacyCatalogClient is the client API for PharmacyCatalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PharmacyCatalogClient interface {
	CreateMedicine(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	GetMedicine(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	DeleteMedicine(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*Response, error)
	ChangeMedicine(ctx context.Context, in *ChRequest, opts ...grpc.CallOption) (*Response, error)
	GetAllMedicine(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
}

type pharmacyCatalogClient struct {
	cc grpc.ClientConnInterface
}

func NewPharmacyCatalogClient(cc grpc.ClientConnInterface) PharmacyCatalogClient {
	return &pharmacyCatalogClient{cc}
}

func (c *pharmacyCatalogClient) CreateMedicine(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/catalog.PharmacyCatalog/CreateMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyCatalogClient) GetMedicine(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/catalog.PharmacyCatalog/GetMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyCatalogClient) DeleteMedicine(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/catalog.PharmacyCatalog/DeleteMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyCatalogClient) ChangeMedicine(ctx context.Context, in *ChRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/catalog.PharmacyCatalog/ChangeMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyCatalogClient) GetAllMedicine(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/catalog.PharmacyCatalog/GetAllMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PharmacyCatalogServer is the server API for PharmacyCatalog service.
// All implementations must embed UnimplementedPharmacyCatalogServer
// for forward compatibility
type PharmacyCatalogServer interface {
	CreateMedicine(context.Context, *CreateRequest) (*CreateResponse, error)
	GetMedicine(context.Context, *GetRequest) (*GetResponse, error)
	DeleteMedicine(context.Context, *DelRequest) (*Response, error)
	ChangeMedicine(context.Context, *ChRequest) (*Response, error)
	GetAllMedicine(context.Context, *GetAllRequest) (*GetAllResponse, error)
	mustEmbedUnimplementedPharmacyCatalogServer()
}

// UnimplementedPharmacyCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedPharmacyCatalogServer struct {
}

func (UnimplementedPharmacyCatalogServer) CreateMedicine(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicine not implemented")
}
func (UnimplementedPharmacyCatalogServer) GetMedicine(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicine not implemented")
}
func (UnimplementedPharmacyCatalogServer) DeleteMedicine(context.Context, *DelRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedicine not implemented")
}
func (UnimplementedPharmacyCatalogServer) ChangeMedicine(context.Context, *ChRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMedicine not implemented")
}
func (UnimplementedPharmacyCatalogServer) GetAllMedicine(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMedicine not implemented")
}
func (UnimplementedPharmacyCatalogServer) mustEmbedUnimplementedPharmacyCatalogServer() {}

// UnsafePharmacyCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PharmacyCatalogServer will
// result in compilation errors.
type UnsafePharmacyCatalogServer interface {
	mustEmbedUnimplementedPharmacyCatalogServer()
}

func RegisterPharmacyCatalogServer(s grpc.ServiceRegistrar, srv PharmacyCatalogServer) {
	s.RegisterService(&PharmacyCatalog_ServiceDesc, srv)
}

func _PharmacyCatalog_CreateMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyCatalogServer).CreateMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.PharmacyCatalog/CreateMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyCatalogServer).CreateMedicine(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyCatalog_GetMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyCatalogServer).GetMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.PharmacyCatalog/GetMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyCatalogServer).GetMedicine(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyCatalog_DeleteMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyCatalogServer).DeleteMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.PharmacyCatalog/DeleteMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyCatalogServer).DeleteMedicine(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyCatalog_ChangeMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyCatalogServer).ChangeMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.PharmacyCatalog/ChangeMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyCatalogServer).ChangeMedicine(ctx, req.(*ChRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyCatalog_GetAllMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyCatalogServer).GetAllMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.PharmacyCatalog/GetAllMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyCatalogServer).GetAllMedicine(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PharmacyCatalog_ServiceDesc is the grpc.ServiceDesc for PharmacyCatalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PharmacyCatalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.PharmacyCatalog",
	HandlerType: (*PharmacyCatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMedicine",
			Handler:    _PharmacyCatalog_CreateMedicine_Handler,
		},
		{
			MethodName: "GetMedicine",
			Handler:    _PharmacyCatalog_GetMedicine_Handler,
		},
		{
			MethodName: "DeleteMedicine",
			Handler:    _PharmacyCatalog_DeleteMedicine_Handler,
		},
		{
			MethodName: "ChangeMedicine",
			Handler:    _PharmacyCatalog_ChangeMedicine_Handler,
		},
		{
			MethodName: "GetAllMedicine",
			Handler:    _PharmacyCatalog_GetAllMedicine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog.proto",
}
